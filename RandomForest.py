# -*- coding: utf-8 -*-
"""Women_hack_for_safety (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6x0Ne9kYdBope_yEeIICX3DNAb6vtlP
"""

import pandas as pd

#Matrix measurement
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

#Machine Learning Model
from sklearn.ensemble import RandomForestClassifier

# import train/test splitting function from sklearn
from sklearn.model_selection import train_test_split

from sklearn.preprocessing import LabelEncoder

#import the CSVs
test_df = pd.read_csv('Test.csv')
train_df = pd.read_csv('Train.csv')

#checking for class imbalance on the target value
train_df['target'].value_counts()

test_df.head()

train_df.head()

#checking if there are any null values in the whole dataframe
train_df.isnull().sum()

#LabelEncoder encodes values with 0 and n-classes - 1 where n is the number of distinct classes
label = LabelEncoder()

train_df['gender'] = label.fit_transform(train_df['gender'])
train_df['race'] = label.fit_transform(train_df['race'])
train_df['dwelling'] = label.fit_transform(train_df['dwelling'])
train_df['dwelling_type'] = label.fit_transform(train_df['dwelling_type'])
train_df['province_code'] = label.fit_transform(train_df['province_code'])
train_df['metro_code'] = label.fit_transform(train_df['metro_code'])
train_df['nationality'] = label.fit_transform(train_df['nationality'])
train_df['RTH'] = label.fit_transform(train_df['RTH'])
train_df['marital_st'] = label.fit_transform(train_df['marital_st'])
train_df['Lang_inside'] = label.fit_transform(train_df['Lang_inside'])
train_df['Lang_outside'] = label.fit_transform(train_df['Lang_outside'])
train_df['Education'] = label.fit_transform(train_df['Education'])
train_df['lw_work'] = label.fit_transform(train_df['lw_work'])
train_df['lw_business'] = label.fit_transform(train_df['lw_business'])
train_df['help_on_household'] = label.fit_transform(train_df['help_on_household'])
train_df['job_or_business'] = label.fit_transform(train_df['job_or_business'])
train_df['nature_of_work'] = label.fit_transform(train_df['nature_of_work'])

train_df.head(2)

# Separate majority and minority classes
from sklearn.utils import resample
df_majority = train_df[train_df.target==0]
df_minority = train_df[train_df.target==1]
 
# Downsample majority class 
df_majority_downsampled = resample(df_majority, 
                                 replace=False,    # sample without replacement
                                 n_samples= 605,     # to match minority class
                                 random_state=123) # reproducible results
 
# Combine minority class with downsampled majority class
df_downsampled = pd.concat([df_majority_downsampled, df_minority])
 
# Display new class counts
df_downsampled.target.value_counts()

# split data into predictors and response
# THIS X AND Y VALUE ARE BASED ON MERGED DATAFRAME AND THEREFORE IS NOT THE SAME AS THE UNMERGE ONE. X COLS WILL DIFFER

X = train_df.drop(['target', 'ID', 'gender'], axis=1)
y = train_df['target']

X_train, X_test, y_train, y_test = train_test_split(X, 
                                                    y, 
                                                    test_size=0.30, 
                                                    random_state=42)

# Fitting Random Forest Regression to the dataset
regressor = RandomForestClassifier()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

#print the classification report
print(metrics.classification_report(y_test, y_pred))

#print the confusion matrix
cm = confusion_matrix(y_test, y_pred)                                           
cm

"""# Test"""

# preprocessing
test_df['gender'] = label.fit_transform(test_df['gender'])
test_df['race'] = label.fit_transform(test_df['race'])

# preprocess all the othe columns as well
test_df['dwelling'] = label.fit_transform(test_df['dwelling'])
test_df['dwelling_type'] = label.fit_transform(test_df['dwelling_type'])
test_df['province_code'] = label.fit_transform(test_df['province_code'])
test_df['metro_code'] = label.fit_transform(test_df['metro_code'])
test_df['nationality'] = label.fit_transform(test_df['nationality'])
test_df['RTH'] = label.fit_transform(test_df['RTH'])
test_df['marital_st'] = label.fit_transform(test_df['marital_st'])
test_df['Lang_inside'] = label.fit_transform(test_df['Lang_inside'])
test_df['Lang_outside'] = label.fit_transform(test_df['Lang_outside'])
test_df['Education'] = label.fit_transform(test_df['Education'])
test_df['lw_work'] = label.fit_transform(test_df['lw_work'])
test_df['lw_business'] = label.fit_transform(test_df['lw_business'])
test_df['help_on_household'] = label.fit_transform(test_df['help_on_household'])
test_df['job_or_business'] = label.fit_transform(test_df['job_or_business'])
test_df['nature_of_work'] = label.fit_transform(test_df['nature_of_work'])

### predict on the test data
test_ = test_df.drop(["ID", 'gender'], axis=1)
test_predictions = regressor.predict(test_)
submission_df = pd.DataFrame()
submission_df["ID"] = test_df["ID"]
submission_df["target"] = test_predictions
submission_df.head()

a = submission_df['target'].unique()
print(a)

#Save as csv
submission_df.to_csv("friend.csv", index=False)